-->open source container orchestration platform developed by google
-->designed to automate deployment scaling and management of containerized applications across a cluster of nodes
-->provides a consistent and reliable way to manage applications,regardless of whether they are running on-premises,in cloud or in hybrid environments
=================================
Microservices:
-->software architecture pattern that software applictaions as a collection of small,independtly deployable services
-->each microservice is designed to perform a specific function or business capability and communicates with other services over well-defined api's or protocols
======================================

Architecture of kuberenetes:
-->master node/control plane:if we set up kuberenetes on cloud, master node is taken care by the cloud-provider(eks,aks,gke)
   components-
       -API server-API server is the component of kuberenetes control plane that exposes the kuberenetes API.API server is the frontend for the kuberentes control plane
       -controller manager-that runs the controller processes
       -scheduler-control plane component that watches for the newly created pods with no assigned nodes and selects a node for them to run on
       -etcd-consistent and highly avaliable key value store used as kubernetes backing store for all cluster data
-->worker node:
   components
        -kubelet-an agent that runs on each node in a cluster.it makes sure that containers are running in a pod
                 the kubelet takes a set of PodSpecs that are provided through various mechanism and ensures that  the containers describe in those PodSpecs are running and healthy
                 doesnot manage containers which are not created by kuberenets
        -kube-proxy-it is a network proxy that runs on each node in your cluster ,implementing part of kubernetes concept
                 maintains network rules on nodes
                 these network rules allow network communication to your pods from network sessions inside or outside of your cluster
===============================================
workload components-
-->pods-
-1 main container others all are helper/sidecar container
-smallest and most basic unit of deployment
-represents the single instance of running process within the cluster
-a pod encapsulates one or more containers,storage resources,network configurations  and other options required to run a specific set of containers together
-pods are typically created and managed using higher-level abstractions such as deployments,replicasets or statefulsets which provides additional features like scaling,rolling updates and self-healing capabilities
-pods provide several benefits including resource isolation, flexible deployment strategies,easy scaling and enhanced reliabilities
-->deployments:
-is an obj that provides declarative updates and management for a set of replica pods
-when you create a deployment you specify the desired state by defining the container images,number of replicas and other configuration parameters
-kuberenetes then ensures the actual state matches with desired state
-if there are any descrepancies, kubernetes automatically takes action to recoincile the state, creating and deleting pods as necessary.
-->replicasets:
-in kuberenets,replicaset is an object that ensures a specified number of rerplica pods are running at any given time 
-it is responsible for maintaining the desired replica count and managing the lifecycle of pods
-replicasets are typically used to manage stateless applications where individual instances of application can be treated as interchangeables
-they help in achieving high avaliability and scalability by automatically scaling the number of replicas up or down based on the defined specifications
-when you create a replicasset you specify the desired number of replicas and provide a templpate for creating  pods
-->services-
is an abstarction that provides a consistent way  to access and communicate with set of pods
it acts as a stable network endpoint for accessing the pods ,enabling the interpod communication and loadbalancing
--------->clusterip-the default service type which exposes the service on a cluster-internal ip address.it is accessible only within the cluster
--------->nodeport-exposes the service on the specific port on each node on the cluster .the service is accessible using the cluster node ip addresses(used only for testing purpose)
--------->loadbalancer-provison a cloud providers load balancer to distribute the traffic to the service.External clients can access the service using a publicly accessble ip address(layer 4--one website under one loadbalancer)
--------->externalname-maps the service name to the dns name allowing the service to redirect request  to an external endpoint outside the cluster
-->ingress-
is an API object that provides external access to the services within the cluster
is an API object that defines rules for routing external HTTP nad HTTPS traffic to services within cluster
it acts as layer 7-->(layer -7 means we can number of websites under one loadbalancer)(application load balancer), allowing external traffic to be routed to different services based on HTTP/HTTPS routed and rules 
it acts as layer 7(application load balancer) allows for more advanced traffic routing and configurations compared to basic service and nodeport approaches
using ingress resources,you can define complexrouting rules,manage multiple backend services and customize the behaviour of incoming traffic for your applications in kuberenetes
the ingress controller will handle the implementation and enforcement  of these rules allowing the external traffic to be efficiently and securly routed to appropriate services within the cluster 
ingress controller-
manages and operates the ingress resource
it is responsible for fulfilling the ingress rules by configuring and managing the underlying loadbalancer or reverse proxy tht handels the incoming traffic 
by using the ingress controller ,kubernetes cluster can leverage the ingress resource to manage the external access to services in a more centralized and flexible manner
the ingress controller abstracts the complexities of loadbalancing and routing ,providing a convienient interface to define and mange the ingress riules for applications running in acluster

INGRESS RESOURCES-
- in kuberenetes,an ingress  resource is an api object that defines rules for routing HTTP and HTTPS traffic to services with in the cluster
- it acts as a layer 7 application load balancer and allows for more advanced traffic routing and configuration as acompared to the basic nodeport and service approaches
-using ingress resources you can define the complex routing rules manage ultiple backend servicesand customi9se the behaviour of incoming trtaffic to your application in kuberenetes
- the ingress conteroller  will handle the implementation and enforcement of these rules allowing external traffic to be effenciently and securely routed to the appropriate services within the cluster
---------------------------
CONFIG MAPS
in kuberenets,config map is an api object used to store the configuration data that can be consumed by the pods or other resources in the cluster
- it provides a way to decouple configuration settings from the containerized applications making it easir=er to manage and update the configuration data without modifying the application code or container images
- configmaps stores key-value pairs or provide ability to mount configuration  files as data
- this can include environment variables ,command line arguments ,configuration files  or any other tyope of configuration data required by your application
----------------------------
SECRETS
in kuberenets,secrets is an api object to store sensitive information such as [asswords ,tokens and ssh key-pairs
-they provide a way to securely store and manage sensitive data within cluster
they can be used by the application and pods to access  sensitive information without exposing it in plain text
- they are typically used to store data that needs to be passed to containers securely such as database credsentials ,API keys and TLS certificates
-they are stored in cluster ETCD datastore encrypted at rest .they can be accessed by pods or other kuberenetes resources securely
secrets can be mounted on files or exposed as environment variables withhin a container
DIFFERENT TYPES
---opaque-the most common type of secret.it allows to store the arbitary key-value pairs as base64 encoded strings.it is suitable for storing the general purpose sensitive information
---docker registery-used for storing credentials to authenticate with the private docker registery.It includes the server,user name password and email fields
---TLS-used to store tls certificates and private keys.It includes the tls.crt and tls.key fields 
---service account- automatically created secrets that  provide credentials for accessing the kuberenets api .they are assosciated with the service accounts and allow pods to authenticate with api server
-------------------------------------------------------
NAMESPACES-
-namespaces are used to create virtual clusters with the physical cluster 
-they provibde a way to divide cluster resources into logical groups enabling multiple teams or appllications to co exist and operate independently within the same kuberenetes cluster
- namespaces helps in organizing and isolationg resoources,improving resources utilizationand providing a level of seperation between different environments, projects or teams 
-they act as a scope for kuberenetes objects such as pods ,deployments ,configmaps and secrets
-each object in kuberenetes belongs to specific namespace
KEYPOINTS-
-isolation-namespace provides isolation between resources .objects in one name space typically not aware of the objects in other namespaces unless explicitilyconfigured to communicate 
-resource allocation-resources ljne CPU and memory storage bandwidth can be allocated and managed at the namespace level .ythis allows for the resource quotas and loimits to be set for each namespace
-Access control-kuberenetes RBACcan be used to define the fine grained access control policies at the namespace level .this enables differenet teams or user to have different permisssions within respective namespacesa
NAMESPACE SCOPES-
-kuberenetes have 4 different namespaces-default,kube-system,kube-public and kube-node lease
-the default namespace is where almost all nresources are created by default
-the kubesystem namespace contains the system realted objects created by kuberentes itself
-kubepublic namespace is pub;licly readble
and contains cluster -wide resources
-kube-node lease namespace is used by kuberenetes nodes to communicate their lease status 
===================================================================================
PERSISTANT VOLUMES
-is a piece of storage provisoned in a cluster that can be dynamically allocated and managed by the adminstrators
-PVs provide a way to decouple storage from the lifecycle of pods and allow the data to persistbeyond the lifetime of individual pods
-they serve as an abstraction layer between the physical storage (such as network attached storage or local storage) and the application's need for storage
-they enable applications to request storage resources without needing the details of underlying infrastructure.
keypoints-
--provisioning
-PVs can provisioned statically or dynamically 
-static provisioning including creating PVs in advance while dynamic provisioning allows PV s to be created on demand when requested by the application

--storage classes
-dynamic provisioning of PVs is facilitated though the use storage classes
-storage classes defines different classes of storage with specific characterstics (eg:performance and access modes)and specify the provisioner responsible for dynamically creating storage 

--accessmodes
-PVs support different access modesto cater to different types of storage requirements
-the common  access modes are ReadWriteOnce(RWO) for single node readwrite access,ReadOnlyMany(ROX)for  multiple nodes read only access and ReadWriteMany(RWX) for multiple nodes read-write access

--lifecycle and reclaim poilcy
-PVs have a lifecycle independent of pods that use them
-they can be managed seperately from pods
-when Pv is no longer needed it can be released and made avaliable for reuse 
-the reclaim policy determines what happens to storage when pv is released allowing opotions like retaining data,deleting the data,or manual reclaimation

persistent volume claims (PVCs)
-are used by the applications to request storage from PVs
-PVCs defines the desired characterstics of the storage such as size ,access mode and storage class
-when pVC is created kuberenetes dynamically binds it to an avaliable PV that matches the requirements of specified in the claim
-3 DIFFERENT CLAIM POILICIES that determines whta happens to assosicated Pv when PVC  is deleted or no longer needed
--retain-the PV assosciated with PVC is not automatically deleted or released when PVC is deleted .Instead PV is retained and its content is preserved
--delete-assosciated PV is automatically deleted when PVC is deleted
--recycle-deprecated
=======================================================
STATEFULSETS
-workload API object used to manage stateful applications
unlike traditional deployment of stateless application ,stateful application require stableand unique network identities ,stable storage  and ordered and predicatble deploymemt and scaling
Statefulsets are commmonly used for deploying and managing stateful applications such as databases (eg:MysSQL)and messaging service(eg:kafka)and other applications that require stable network identities and persistent storage 
FEATURES
STABLE NETWORK IDENTITIES-each pod in statefulset is assigned a unique and stablehostname based on the naming convention.this allows the stateful applictaions to have consistent network identity even when they are scaled up and down
ORDERED DEPLOYMENT AND SCALING-statefulsets ensures that pods adeployed and scaled in a sequential and orderly manner.each pod is  created and fully running before the next pod is started ,ensuring dependencies and sequencing requirements are maintained
STABLE STORAGE-statefulsets provide stable and unique storage volumes for each pod.PV and PVC are used to provide storage to podsallowing data to be persisited and reatined accross pods restarts and rescheduling.
HEADLESS SERVICE-statefulsets automatically creates headless service which allows each pods to have its own DNS entry.this enables direct communication between pods using their unique hostnames
STATEFUL POD SCALING-statefulset suppport both horizontal and vertical pod scaling vertical scaling involves chaning the resources (cpu and memory) allocated to each pod and horizontal scaling involves adding or removing pods from the stateful set
ORDERED TERMINATION-when scaling down or terminating pods in a statefulset,kuberentes ensures that the pods are terminated in the reverse order of creation .this allows for the orderly application shutdown and ensures data integrity and consistency

===========================================================================
HORIZONTAL POD SCALER
-HPA automatically adjust the number of replicas of deployment ,replicaset or statefulset,based on observed CPU utlization or custom metrics
-it ensures that there are enough replicas to handle the incoming traffic and prevent the overloading of the cluster
-when CPU or custom  metrics  exceeded the defined threshholds HPA scales up the replicas and when the metridcs decreases it scales down the replicas
==================================================================
CLUSTER AUTOSCALER
-Ii adjusts the size of kuberenetes cluster by adding and removing nodes based on the resource demands of the pods 
-It ensures that there are enough resources avaliable in the cluster to accomodate the scheduled pods
=====================================\
LIMITRANGE-
-Are used to specify the constraints on the resource requests and limits for pods in a namespace
-they help prevent pods from using excessive resouces or ensure that all pods have minimum resource guarantee
=================================
RESOURCEQUOTA-
Are used to limit the total amount of the compute resources(CPU AND MEMORY)that can be used within the namespace
-they help to control the resource consumption of all pods and containers within that namespace


